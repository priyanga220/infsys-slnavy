
This is a real rough script I'm using to develop the application, it will be
the basis for how to create this demo in the future.

If you're following along and reading this, then please treat this as my rough
notes and not what the final document is to become. Once this is fairly
complete I will be rewriting it into a document with propper code snippets
references and screen-shots where applicable.

If you find any bugs in this document please let me know on the google code
page by creating a new issue log.

    http://code.google.com/p/cwpfsamples/


Create base solution
--------------------
 1. Create a new empty solution named 'LateNight'
 2. Create the following solutions folders
    - Application
    - Modules
 3. Create a WPF application Project named LateNight in "Application"
    solution folder.
 4. Open Properties for LateNight and change default namespace to
    BrettRyan.LateNight.
 5. Add an infrastructure project called "LateNight.Infrastructure" in
    "Application" solution folder.
 6. Open properties for LateNight.Infrastructure and change default namespace to
    "BrettRyan.LateNight.Infrastructure".
 7. Add a reference to LateNight.Infrastructure to the LateNight project.
 8. Delete default "Class1.cs" from LateNight.Infrastructure.
 9. Open properties for LateNight, navigate to the build tab and change the
    output location to "..\Build\Debug" for the Debug build and
    "..\Build\Release" for the release build.
10. Perform step #7 for the LateNight.Infrastructure project.


Make Application CAL (Composite Application Library?) Ready
-----------------------------------------------------------
 1. Add the following library references to LateNight
    - Microsoft.Practices.Composite
    - Microsoft.Practices.Composite.UnityExtensions
    - Microsoft.Practices.Composite.Wpf
    - Microsoft.Practices.ObjectBuilder2
    - Microsoft.Practices.Unity
 2. Remove default "Window1.xaml" and associated code behind file.
 3. Remove reference to "StartupUri" property in App.xaml
 4. Create a new WPF window called LateNightShell.xaml.
 5. Create a new class called LateNightBootstrapper.
 6. Add the following using statements.

using System.Windows;
using Microsoft.Practices.Composite.Modularity;
using Microsoft.Practices.Composite.UnityExtensions;

 7. Alter the class signature to extend from "UnityBootstrapper".
 8. Right click "UnityBootstrapper" and choose "Implement Abstract Class".
 9. Replace the CreateShell() implementation with the following:
 
    LateNightShell shell = Container.Resolve<LateNightShell>();
    shell.Show();
    return shell;

10. Override the GetModuleEnumerator() method with the following implementation

    ConfigurationStore store = new ConfigurationStore();
    return new ConfigurationModuleEnumerator(store);

    (NOTE:) this configures the module enumerator to use the implementation
    that reads your application settings file (App.config).
    
11. Add a new application configuration file to LateNight (App.config).
12. Open App.config and add the following inside the <configuration> tag:

  <configSections>
    <section name="modules"
             type="Microsoft.Practices.Composite.Modularity.ModulesConfigurationSection, Microsoft.Practices.Composite"/>
  </configSections>

  <modules>
  </modules>
  
13. Open App.xaml
14. Change the namespace to the x:Class tag to be BrettRyan.LateNight.
15. Open the App.xaml code behind file (App.xaml.cs).
16. Alter the namespace to be "BrettRyan.LateNight".
17. Add a default constrcutor (App()) with the following implementation:

    LateNightBootstrapper bootStrapper = new LateNightBootstrapper();
    bootStrapper.Run();


Create a Shell Layout
---------------------

 1. Open LateNightShell.xaml and replace the contents with the following
 
 >>>> LateNightShell.xaml
 <Window
    x:Class="BrettRyan.LateNight.LateNightShell"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Late Night" Width="640" Height="480">

    <DockPanel>
        <StackPanel DockPanel.Dock="Top">
            <StackPanel Orientation="Horizontal"
                        VerticalAlignment="Center">
                <StackPanel.Background>
                    <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                        <GradientStop Color="#FF293262" Offset="0"/>
                        <GradientStop Color="#FF5A6DCD" Offset="0.4"/>
                        <GradientStop Color="#FF5A6DCD" Offset="0.6"/>
                        <GradientStop Color="#FF293262" Offset="1"/>
                    </LinearGradientBrush>
                </StackPanel.Background>
                <Label Foreground="#FFC3C9E9"
                       FontWeight="Normal"
                       FontSize="16"
                       FontFamily="Calibri"
                       Content="Late Night"/>
                <Label Foreground="Orange"
                       FontWeight="Normal"
                       FontSize="16"
                       FontFamily="Calibri"
                       Content="v0.1"/>
            </StackPanel>
            <Menu>
                <MenuItem Header="_File">
                    <MenuItem Header="E_xit"/>
                </MenuItem>
                <MenuItem Header="_Help">
                    <MenuItem Header="_About"/>
                </MenuItem>
            </Menu>
            <Border Height="5">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FF525252" Offset="0"/>
                        <GradientStop Color="#00FFFFFF" Offset="1"/>
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
        </StackPanel>

        <StatusBar Height="23" DockPanel.Dock="Bottom" Foreground="#FFE9EEF0">
            <StatusBar.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF484B4D" Offset="0"/>
                    <GradientStop Color="#FFFFFFFF" Offset="0.01"/>
                    <GradientStop Color="#FF787B7D" Offset="0.014"/>
                    <GradientStop Color="#FF3A3E42" Offset="0.5"/>
                    <GradientStop Color="#FF04090F" Offset="0.5"/>
                </LinearGradientBrush>
            </StatusBar.Background>
            <StatusBarItem Content="Ready"/>
        </StatusBar>

        <Grid>
            <Grid.Background>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFF2F2F2" Offset="0"/>
                    <GradientStop Color="#FF717477" Offset="0.346"/>
                </LinearGradientBrush>
            </Grid.Background>
            <Grid.ColumnDefinitions>
                <ColumnDefinition MinWidth="175" Width="Auto"/>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition MinWidth="100" Width="*"/>
            </Grid.ColumnDefinitions>

            <TabControl Grid.Column="0" Margin="5"/>

            <GridSplitter Grid.Column="1" Width="5"
                          Margin="0,35,0,10"
                          ResizeBehavior="PreviousAndNext"
                          ResizeDirection="Columns"
                          Background="#FFF0F0F0"
                          BorderBrush="#FF8C8E94"
                          BorderThickness="1,1,1,1" />

            <TabControl Grid.Column="2" Margin="5"/>

        </Grid>

    </DockPanel>

</Window>
<<<< LateNightShell.xaml


(Optional) Make the Menu Auto-hide
----------------------------------
In order to make the menu in the application hide like in IE7, follow this
procedure.

* TODO: Code isn't perfect just yet.

 1. Open LateNightShell.xaml view and add the following tags to the "Window"
    element.
    
    KeyDown="DoKeyDownHandler"
    KeyUp="DoKeyUpHandler"
    
 2. Give the <Menu> element a name of 'xMainMenu', set the initial Visibility
    to Collapsed and add an event handler for 'IsKeyboardFocusWithinChanged'.
 
    <Menu x:Name="xMainMenu" Visibility="Collapsed"
          IsKeyboardFocusWithinChanged="DoMenuLostFocus">

 3. Open the shells code-behind file (LateNightShell.xaml.cs) and add the
    following event handler implementations.
    
        private void DoKeyDownHandler(object sender, KeyEventArgs e) {
            if (!xMainMenu.HasItems) {
                return;
            }
            if (xMainMenu.Visibility == Visibility.Visible) {
                return;
            }
            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt) {
                xMainMenu.Visibility = Visibility.Visible;
            }
        }

        private void DoKeyUpHandler(object sender, KeyEventArgs e) {
            if (xMainMenu.IsKeyboardFocusWithin) {
                return;
            }
            if ((e.KeyboardDevice.Modifiers & ModifierKeys.Alt) == ModifierKeys.Alt) {
                return;
            }
            xMainMenu.Visibility = Visibility.Collapsed;
        }

        private void DoMenuLostFocus(object sender, DependencyPropertyChangedEventArgs e) {
            if (!xMainMenu.IsKeyboardFocusWithin) {
                if (xMainMenu.Visibility != Visibility.Visible) {
                    return;
                }
                xMainMenu.Visibility = Visibility.Collapsed;
            }
        }

As a note I'd like to mention that this section shows the distinction between
UI specific code and module/model/application code. Take note as to how the
code within the code-behind file only refers to UI elements and nothing more,
It's purely "Eye Candy" type code which maybe your design tem may have
implemented.


Create a Shell Model
--------------------
In order to make our shell more flexible and less coupled to our application we
will add a Model to represent the shells data.

 1. Create a new class called LateNightShellModel
 2. Alter the class signature to extend from INotifyPropertyChanged and add
    a using statement for System.ComponentModel.
 3. Add the following implementation for INotifyPropertyChanged:
 
        #region INotifyPropertyChanged Members

        private event PropertyChangedEventHandler propertyChangedEvent;

        public event PropertyChangedEventHandler PropertyChanged {
            add { propertyChangedEvent += value; }
            remove { propertyChangedEvent -= value; }
        }

        protected void OnPropertyChanged(string prop) {
            if (propertyChangedEvent != null)
                propertyChangedEvent(this, new PropertyChangedEventArgs(prop));
        }

        #endregion

 4. Open LateNightBootstrapper.cs and override ConfigureContainer().
 5. Add a method call for "RegisterServices()" before the base call.
 6. Right click "RegisterServices()" and select "Generate Method Stub", replace
    the default implementation with the following.

        Container.RegisterType<LateNightShellModel>(
            new ContainerControlledLifetimeManager());

 7. Alter the CreateShell() method to set the DataContext property of the
    LateNightShell just after it has been created
    
        protected override DependencyObject CreateShell() {
            LateNightShell shell = Container.Resolve<LateNightShell>();
            shell.DataContext = Container.Resolve<LateNightShellModel>();
            shell.Show();
            return shell;
        }
 

(Optional) Add Version Text to Title
------------------------------------
 1. Add a new class to LateNight.Infrastructure called "VersionHelper"
 2. Add contents of version helper
    
    [see source LateNight.Infrastructure/VersionHelper.cs]
    
 3. Add a string property for ProductVersionText which fires property change
    events.
    
        public string ProductVersionText {
            get { return versionText; }
            set {
                if (!String.Equals(versionText, value)) {
                    versionText = value;
                    OnPropertyChanged("ProductVersionText");
                }
            }
        }

 4. Set the version text in the constructor by placing the following code in
    the constructor body.
    
        public LateNightShellModel() {
            Version ver = VersionHelper.Version;
            if (ver == null) {
                versionText = String.Empty;
            } else {
#if DEBUG
                //versionText = String.Format("v{0}.{1} (Build {2}, Revision {3})",
                //    ver.Major, ver.Minor, ver.Build, ver.Revision);
                versionText = String.Format("v{0}.{1} (Build {2})",
                    ver.Major, ver.Minor,
                    VersionHelper.GetBuildRevisionAsDateTime(ver));
#else
                versionText = String.Format("v{0}.{1}",
                    ver.Major, ver.Minor);
#endif
            }
        }

 6. Open LateNightShell.xaml and replace the content property for the second
    label to the following.
    
    Content="{Binding ProductVersionText}"
    
 7. If you run the application now you will see that the version text reads as
    a date at the end of 1999. You now need to alter your version strings
    within AsseblyInfo.cs for each project (this is only required for the
    shell). Open each AssemblyInfo.cs file and replace the version strings as
    follows:
    
        [assembly: AssemblyVersion("0.2.*")]
        [assembly: AssemblyFileVersion("0.2.0.0")]

Create a Document Controller
----------------------------
Our application will be able to host documents where multiple documents can be
opened at the same time. This is similar to the behaviour you find in Visual
Studio. In order to do this we will use the bridge pattern to expose an
interface within the Infrastructure project that allows modules to open/show
and close/remove documents of any type, the shell will contain a concrete
implementation of this service that will be responsible for exposing the
documents do the main view.

This could be thought of as a service, though there may be multiple instances
of a document controller running in the application (under registered names),
this allows different regions of the application to contain different
documents, services are generally considered singletons. If you feel this is
a service please let me know as I'm a bit undecided at the moment.

AbstractDataModel comes from the DataModel-View-ViewModel sample by Dan
Crevier. Please see his article on the topic, I have reservations for if an
instance is created on a thread other than the UI thread then will it still
work? http://blogs.msdn.com/dancre/archive/2006/07/23/676300.aspx.

 1. Add the following references to LateNight.Infrastructure
 
        PresentationCore
        PresentationFramework
        WindowsBase

 2. Create an enum called ModelState in LateNight.Infrastructure with the
    following implementation:
    
    public enum ModelState {
        Fectching,
        Invalid,
        Active
    }
    
 3. Create a new base model class in the Infrastructure project as a base
    implementation for all data models called AbstractDataModel.
    
    [see source LateNight.Infrastructure/AbstractDataModel.cs]
 
 4. Create a new abstract class in LateNight.Infrastructure called
    AbstractDocument to represent all documents to be controlled.

    public abstract class AbstractDocument : AbstractDataModel {
        public abstract string DocumentTitle {
            get;
        }
        public abstract FrameworkElement View {
            get;
        }
        public abstract string Description {
            get;
        }
    }
    
 5. Add the following using clause to AbstractDocument
 
        using System.Windows;
    
 6. Create a document controller interface in LateNight.Infrastructure called
    IDocumentController.

    public interface IDocumentController {
        ObservableCollection<AbstractDocument> Documents {
            get;
        }
        AbstractDocument CurrentDocument {
            get; set;
        }
        void OpenDocument(AbstractDocument document);
        void CloseDocument(AbstractDocument document);
    }

 7. Add the following using clause to IDocumentController

        using System.Collections.ObjectModel;

 8. Add a new folder to LateNight.Infrastructure called "Constants"
 
 9. Add a new static class to the folder with the following implementation.
 
    public static class ControllerNames {
        public const string DocumentController = "DocumentController";
    }

10. Create a new class in LateNight called DocumentController.
 
    [see source LateNight/DocumentController.cs]
 
11. Open LateNightBootstrapper.cs in LateNight and add the following using
    clauses
    
    using BrettRyan.LateNight.Infrastructure;
    using BrettRyan.LateNight.Infrastructure.Constants;

12. Add the following to the RegisterServices method

        Container.RegisterInstance<IDocumentController>(
            ControllerNames.DocumentController, new DocumentController());

13. Open LateNightShellModel and add the following using clauses

        using Microsoft.Practices.Unity;
        using BrettRyan.LateNight.Infrastructure;
        using BrettRyan.LateNight.Infrastructure.Constants;
        
14. Alter the constructor signature to take an IUnityContainer paramater

        public ShellModel(IUnityContainer container) {

15. Add the following property.

        public IDocumentController DocumentController {
            get;
            private set;
        }

16. Within the constructor add the following

        DocumentController = container.Resolve<IDocumentController>(
            ControllerNames.DocumentController);

17. Add the following namespace tag to the Window element of
    LateNightShell.xaml
    
        xmlns:inf="clr-namespace:BrettRyan.LateNight.Infrastructure;assembly=LateNight.Infrastructure"

18. Add the following to the Window.Resources of LateNightShell.xaml

        <DataTemplate x:Key="DocumentHeaderTemplate"
                      DataType="{x:Type inf:AbstractDocument}">
            <DockPanel ToolTip="{Binding Path=Description}">
                <Label Padding="0" Content="{Binding Path=DocumentTitle}"
                       VerticalAlignment="Center" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate x:Key="DocumentContentTemplate">
            <ContentControl Content="{Binding Path=View}"/>
        </DataTemplate>

        <CollectionViewSource x:Key="DocumentSource"
                              Source="{Binding DocumentController.Documents}"/>

19. Add the following tags to the second tab control in LateNightShell.xaml

        ItemsSource="{Binding Source={StaticResource DocumentSource}}"
        ItemTemplate="{StaticResource DocumentHeaderTemplate}"
        ContentTemplate="{StaticResource DocumentContentTemplate}"
        SelectedItem="{Binding Path=DocumentController.CurrentDocument}"


Create a Welcome Module
-----------------------
Our application is now ready and able to manage documents from modules, we
will now create a new Welcome module that will show a welcome screen in the
document area of the application on startup.

 1. Add a new class library project called LateNight.Modules.Welcome
    to the "Modules" folder.
 2. Alter the default namespace to begin with "BrettRyan." and remove the
    default Class1.cs.
 3. Set the output location to ..\Build\Debug\ for DEBUG and ..\Build\Release\
    for RELEASE.
 3. Add a reference to the following libraries
 
        PresentationCore
        PresentationFramework
        WindowsBase
        
 4. Add the following Composite WPF references
 
        Microsoft.Practices.Composite
        Microsoft.Practices.Unity
        Microsoft.Practices.Unity.ObjectBuilder

 5. Add a project reference to LateNight.Infrastructure
 
 6. Add a new class called WelcomeModel.cs
 
        [see source LateNight.Modules.Welcome/WelcomeModel.cs]
 
 7. Add a new UserControl called WelcomeView to the module solution with the
    following content
    
<UserControl x:Class="BrettRyan.LateNight.Modules.Welcome.WelcomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <DockPanel>
        <CheckBox DockPanel.Dock="Bottom"
                  IsChecked="{Binding Path=ShowOnStartup}"
                  FlowDirection="RightToLeft"
                  HorizontalAlignment="Right"
                  Content="Show on application startup"/>
        <StackPanel>
            <TextBlock TextWrapping="Wrap" Padding="5">
                <Run Text="Welcome to Late Night!" FontSize="14" FontWeight="Bold"/>
                <LineBreak/>
                <Run>
                    Late Night is a trial application used to explore the
                    possibilities of the "Composite WPF" framework (formerly
                    Prism) form the Microsoft Patterns and Practices team.
                </Run>
                <LineBreak/><LineBreak/>
                <Run>You can find out more on the Composite WPF framework at</Run>
                <Hyperlink>http://www.codeplex.com/CompositeWPF</Hyperlink>.
                
                <LineBreak/><LineBreak/>
                <Run>
                    You can find out more on the this sample and more at the
                    Composite WPF samples project page.
                </Run>
                <Hyperlink>http://code.google.com/p/cwpfsamples/</Hyperlink>.
                
            </TextBlock>
        </StackPanel>
    </DockPanel>
</UserControl>

 8. Create a new class called WelcomeModule.cs
 
 9. Add the following using clauses.
 
        using Microsoft.Practices.Composite.Modularity;
        using Microsoft.Practices.Unity;

        using BrettRyan.LateNight.Infrastructure;
 
10. Add the following implementation for WelcomeModule
 
        private readonly IDocumentController documentController;
        private readonly IUnityContainer container;

        /// <summary>
        /// Creates a new instance of <c>WelcomeModule</c>.
        /// </summary>
        public WelcomeModule(IUnityContainer container) {
            this.container = container;
            documentController = container.Resolve<IDocumentController>(
                ControllerNames.DocumentController);
        }

        #region IModule Members
        public void Initialize() {
            documentController.OpenDocument(new WelcomeModel());
        }
        #endregion

11. Add the following to the modules section of the LateNight App.config file.

        <module assemblyFile="LateNight.Modules.Welcome.dll"
                moduleType="BrettRyan.LateNight.Modules.Welcome.WelcomeModule"
                moduleName="WelcomeModule"/>

